Index: src/wps/wps_registrar.c
===================================================================
--- reaver/src/wps/wps_registrar.c	(revision 119)
+++ reaver/src/wps/wps_registrar.c	(working copy)
@@ -1695,6 +1695,16 @@
 	wpa_hexdump(MSG_DEBUG, "WPS: Enrollee Nonce",
 		    wps->nonce_e, WPS_NONCE_LEN);

+    printf("[P] E-Nonce: ");
+    int pixiecnt = 0;
+    for (; pixiecnt < WPS_NONCE_LEN; pixiecnt++) {
+        printf("%02x", wps->nonce_e[pixiecnt]);
+        if (pixiecnt != WPS_NONCE_LEN - 1) {
+            printf(":");
+        }
+    }
+    printf("\n");
+
 	return 0;
 }

@@ -1753,6 +1763,16 @@
 	os_memcpy(wps->peer_hash1, e_hash1, WPS_HASH_LEN);
 	wpa_hexdump(MSG_DEBUG, "WPS: E-Hash1", wps->peer_hash1, WPS_HASH_LEN);

+    printf("[P] E-Hash1: ");
+    int pixiecnt = 0;
+    for (; pixiecnt < WPS_HASH_LEN; pixiecnt++) {
+        printf("%02x", wps->peer_hash1[pixiecnt]);
+        if (pixiecnt != WPS_HASH_LEN - 1) {
+            printf(":");
+        }
+    }
+    printf("\n");
+
 	return 0;
 }

@@ -1767,6 +1787,16 @@
 	os_memcpy(wps->peer_hash2, e_hash2, WPS_HASH_LEN);
 	wpa_hexdump(MSG_DEBUG, "WPS: E-Hash2", wps->peer_hash2, WPS_HASH_LEN);

+    printf("[P] E-Hash2: ");
+    int pixiecnt = 0;
+    for (; pixiecnt < WPS_HASH_LEN; pixiecnt++) {
+        printf("%02x", wps->peer_hash2[pixiecnt]);
+        if (pixiecnt != WPS_HASH_LEN - 1) {
+            printf(":");
+        }
+    }
+    printf("\n");
+
 	return 0;
 }

@@ -1899,6 +1929,16 @@
 	if (wps->dh_pubkey_e == NULL)
 		return -1;

+    printf("[P] PKE: ");
+    int pixiecnt = 0;
+    for (; pixiecnt < 192; pixiecnt++) {
+        printf("%02x", pk[pixiecnt]);
+        if (pixiecnt != 191) {
+            printf(":");
+        }
+    }
+    printf("\n");
+
 	return 0;
 }

Index: src/wps/wps_dev_attr.c
===================================================================
--- reaver/src/wps/wps_dev_attr.c	(revision 119)
+++ reaver/src/wps/wps_dev_attr.c	(working copy)
@@ -186,6 +186,13 @@

 	wpa_hexdump_ascii(MSG_DEBUG, "WPS: Manufacturer", str, str_len);

+    printf("[P] WPS Manufacturer: ");
+    int pixiecnt = 0;
+    for (; pixiecnt < str_len; pixiecnt++) {
+    printf("%c", (char *) str[pixiecnt]);
+    }
+    printf("\n");
+
 	os_free(dev->manufacturer);
 	dev->manufacturer = os_malloc(str_len + 1);
 	if (dev->manufacturer == NULL)
@@ -228,6 +235,13 @@

 	wpa_hexdump_ascii(MSG_DEBUG, "WPS: Model Number", str, str_len);

+    printf("[P] WPS Model Number: ");
+    int pixiecnt = 0;
+    for (; pixiecnt < str_len; pixiecnt++) {
+    printf("%c", (char *) str[pixiecnt]);
+    }
+    printf("\n");
+
 	os_free(dev->model_number);
 	dev->model_number = os_malloc(str_len + 1);
 	if (dev->model_number == NULL)
Index: src/wps/wps_common.c
===================================================================
--- reaver/src/wps/wps_common.c	(revision 119)
+++ reaver/src/wps/wps_common.c	(working copy)
@@ -126,6 +126,16 @@
 			wps->keywrapkey, WPS_KEYWRAPKEY_LEN);
 	wpa_hexdump_key(MSG_DEBUG, "WPS: EMSK", wps->emsk, WPS_EMSK_LEN);

+    printf("[P] AuthKey: ");
+    int pixiecnt = 0;
+    for (; pixiecnt < WPS_AUTHKEY_LEN; pixiecnt++) {
+        printf("%02x", wps->authkey[pixiecnt]);
+        if (pixiecnt != WPS_AUTHKEY_LEN - 1) {
+            printf(":");
+        }
+    }
+    printf("\n");
+
 	return 0;
 }

